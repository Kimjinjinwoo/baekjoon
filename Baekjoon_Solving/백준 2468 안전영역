{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"백준 2468 안전영역","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOWHjy4tTpgufkZq2y9zsR2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r3juVrR23wGB","executionInfo":{"status":"ok","timestamp":1650659100375,"user_tz":-540,"elapsed":50803,"user":{"displayName":"김진우","userId":"12971138652345879224"}},"outputId":"863cdc98-78e1-46eb-ea3a-21ed6761867a"},"outputs":[{"output_type":"stream","name":"stdout","text":["7\n","9 9 9 9 9 9 9\n","9 2 1 2 1 2 9\n","9 1 8 7 8 1 9\n","9 2 7 9 7 2 9\n","9 1 8 7 8 1 9\n","9 2 1 2 1 2 9\n","9 9 9 9 9 9 9\n","6\n"]}],"source":["import sys\n","\n","N = int(input())\n","\n","land = []\n","\n","for _ in range(N):\n","    land.append(list(map(int,input().split())))\n","\n","def bfs(i,j):\n","    \n","\n","    visited[i][j] = False\n","    queue = [[i,j]]\n","\n","    while queue:\n","        n = len(queue)\n","        for _ in range(n):\n","            i,j = queue.pop(0)\n","            a = [i  ,i  , i+1 ,i-1]\n","            b = [j-1,j+1, j,   j ]\n","            for x,y in zip(a,b):\n","                if 0<= x < N and 0 <= y < N:       \n","                    if land[x][y] >= rain and visited[x][y]:\n","                        visited[x][y] = False\n","                        queue.append([x,y])\n","ans = []\n","\n","for rain in range(1,101):\n","\n","    visited = [[True]*N for _ in range(N)]\n","\n","    safty = 0\n","\n","    for i in range(N):\n","        for j in range(N):\n","            if land[i][j] >= rain and visited[i][j]:\n","                bfs(i,j)\n","                safty += 1\n","    \n","    ans.append(safty)\n","\n","print(max(ans))"]},{"cell_type":"markdown","source":["https://ywtechit.tistory.com/66"],"metadata":{"id":"w_q85uus7G7i"}},{"cell_type":"code","source":["from collections import deque\n","import sys\n","input = sys.stdin.readline\n"," \n","def bfs(x, y, safe_area):    # BFS implementation\n","    queue = deque()\n","    queue.append((x, y))\n","    visited[x][y] = 1\t# visited mark\n"," \n","    while queue:\n","        x, y = queue.popleft()\n"," \n","        for i in range(4):\n","            nx = x + dx[i]\n","            ny = y + dy[i]\n"," \n","            if 0 <= nx < N and 0 <= ny < N:\n","                if graph[nx][ny] >= safe_area and visited[nx][ny] == 0:    \n","                    visited[nx][ny] = 1\n","                    queue.append((nx, ny))\n"," \n","N = int(input())\n","graph = [list(map(int, input().split())) for _ in range(N)]\n","graph_min = min(map(min, graph))    # min_height\n","graph_max = max(map(max, graph))    # max_height\n","dx = [-1, 1, 0, 0]\n","dy = [0, 0, -1, 1]\n"," \n","max_safe_area = graph_min   # init min_value\n","for safe_area in range(graph_min, graph_max+1):\n","    visited = [[0] * N for _ in range(N)]\n","    temp = 0\n","    for i in range(N):\n","        for j in range(N):\n","            if graph[i][j] >= safe_area and visited[i][j] == 0:\n","                bfs(i, j, safe_area)\n","                temp += 1\n","    if temp > max_safe_area:    # update safe_zone count\n","        max_safe_area = temp\n","print(max_safe_area)"],"metadata":{"id":"lqSGiRSv6dRx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#deque 쓴거\n","#map(min) 이런거 써서 범위 정한거 -> 난 걍 1~100 다했음"],"metadata":{"id":"M_6bXJ4q7M0s"},"execution_count":null,"outputs":[]}]}