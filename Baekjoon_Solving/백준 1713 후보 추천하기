{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"백준 1713 후보 추천하기","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPQFu6ugIpFV8omTh8JkVwD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xIJRUB8ORiI3","executionInfo":{"status":"ok","timestamp":1649995751343,"user_tz":-540,"elapsed":4893,"user":{"displayName":"김진우","userId":"12971138652345879224"}},"outputId":"63efe975-f106-427f-b4c4-0451668dabb8"},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","1\n","2 3 4 5\n","5 "]}],"source":["# my sol\n","N = int(input())\n","T = int(input())\n","recoms = list(map( int , input().split() ))\n","\n","diction = {}\n","photos = []\n","\n","for i in range(1,101):\n","    diction[i] = 0\n","\n","for recom in recoms:\n","    if diction[recom] == 0:\n","\n","        diction[recom] = 1\n","        photos.append(recom)\n","\n","        mini = 1001\n","\n","        if len(photos) > N:\n","            for i in range(N):\n","                num = diction[photos[i]]\n","                if num < mini:\n","                    mini = num\n","                    delete = i\n","            diction[photos[delete]] = 0\n","            del photos[delete]\n","            #print(photos , recom)\n","    else:\n","        #photos.remove(recom)\n","        #photos.append(recom)\n","        diction[recom] += 1\n","\n","photos.sort()\n","\n","for ans in photos:\n","    print(ans , end=' ')"]},{"cell_type":"markdown","source":["https://dreamtreeits.tistory.com/28"],"metadata":{"id":"_3NSZJ0pfN5E"}},{"cell_type":"code","source":["#  other sol\n","from sys import stdin\n","import heapq\n","\n","\n","def solution(n):\n","    student = {}\n","    data = list(map(int, stdin.readline().split()))\n","    for s in data:\n","        if s not in student:\n","            if len(student) >= n:\n","                # dict를 heapq 모듈을 사용해 최솟값을 뽑아냄\n","                a = heapq.nsmallest(min(student), student, key=student.get)\n","                student.pop(a[0])\n","\n","            student[s] = 1\n","        else:\n","            student[s] += 1\n","\n","    return sorted(student.keys())\n","\n","\n","n = int(stdin.readline().rstrip())\n","r = int(stdin.readline().rstrip())\n","print(*solution(n))"],"metadata":{"id":"ltZMrrJtUgVJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# headq 쓰는거 이해 좀 안되네 -> 대충 알긴 할듯 \n","# key 값 뽑아서 소트 한거\n","\n","\n","# dictionary 크기 큰거 제외하면 내가 나은거 같긴 하거\n","# not in 연산이 좀 오래 걸릴 수도 있어서\n","# 메모리는 덜 먹는데 오래 걸리는 듯"],"metadata":{"id":"3-hG_JvcdruB"},"execution_count":null,"outputs":[]}]}